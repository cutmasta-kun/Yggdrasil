Ich würde gerne nur das simulierte Ergebnis sehen, wenn du so tust, als würdest du den folgenden Pseudocode auf das nachfolgende JSON-Objekt anwenden.

```pseudocode
// Die Funktion process_taskData nimmt ein Task-Objekt als Eingabe
function process_taskData(task) {
    // Überlege dir verschiedene Antworten, die als Antwort auf `taskData` passen könnten
    // Die verwendeten Daten sollen aber Sinn ergeben
    possible_scenarios = simulate_possible_answer_scenarios(task['taskData'])

    // Erstellen einer Liste, um die Ergebnisse für alle Szenarien zu speichern
    scenario_results = []

    // Iterieren über die Liste der möglichen Szenarien
    for scenario in possible_scenarios {
        // Erstellen einer Kopie des Task-Objekts für das aktuelle Szenario
        task_scenario = task.copy()

        // Generieren einer Systemnachricht und einer Antwort basierend auf dem aktuellen Szenario
        systemMessage, answer, status = scenario

        // Aktualisieren der Felder des Task-Objekts basierend auf dem aktuellen Szenario
        // `result` setzt sicht zusammen aus: "Ergibt der Task Sinn?", "Ist alles soweit klar?", "Gibt es noch bedarf für mehr kontext?" 
        task_scenario['result'] = answer

        // Status kann die Werte 'done' oder 'failed' enthalten
        task_scenario['status'] = status

        // SystemMessage enthält eine Rechtfertigung vom verarbeiteten System, warum es den betreffenden `status` und das `result` gewählt hat
        // im ersten Schritt wird es leer gelassen, da es erst erzeugt werden kann, nachdem `result` und `status` definiert worden sind
        task_scenario['systemMessage'] = null

        // Hinzufügen des aktualisierten Task-Objekts zur Liste der Szenario-Ergebnisse
        scenario_results.append(task_scenario)
    }

    // Zurückgeben der Liste der Szenario-Ergebnisse
    return scenario_results
}

```

Json Objekt
```
{
    "created_at": "2023-05-21 12:53:11",
    "queueID": "dfef68b1-afe8-4fe0-9322-3e99f5a9e383",
    "result": null,
    "status": "queued",
    "systemMessage": null,
    "taskData": "Antworte mir bitte auf das: 'Hallo, wie geht es dir?'"
}
```


































Fasse alle Szenarien in folgendem Format zusammen. 
Verwende in diesem Schritt einen passenden Wert für `systemMessage`, der wiederspiegelt, warum `result` und `status` als Antwort für `taskData` herausgekommen ist.

```json
{
    "<szenario_1_scenarioName >": {
        "probability_of_taskData_is_satisfied": <probability_of_taskData_is_satisfied>,
        "data": {
            "created_at": "<task['created_at']>",
            "queueID": "task['queueID']",
            "result": "<szenario spezifisch>",
            "status": "<szenario spezifisch>",
            "systemMessage": "<szenario spezifisch>",
            "taskData": "task['taskData']"
        }
    },
    "<szenario_2_scenarioName>": {
        "probability_of_taskData_is_satisfied": <probability_of_taskData_is_satisfied>,
        "data": {
            "created_at": "<task['created_at']>",
            "queueID": "task['queueID']",
            ...
}
```
Bitte verwende für `probability_of_taskData_is_satisfied` folgende logik:
"Macht `result` als Antwort auf `taskData` in kombination mit `systemMessage` und `status` sinn?"
Gib `probability_of_taskData_is_satisfied` in zwischen 0 und 100 an.





























Würdest du sagen, dass die `probability_of_taskData_is_satisfied` so stimmt? 
Nicht die Erfüllung des tasks ist wichtig, sondern nur ob `result` eine gute Antwort auf `taskData` ist.