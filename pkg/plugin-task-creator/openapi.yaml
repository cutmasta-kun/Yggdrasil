openapi: 3.0.1
info:
  title: Bistromathic Queue System 
  description: An adaptable queuing system adept at managing and processing a diverse range of tasks. Inspired by the unpredictable yet precise nature of bistromathics, this system is designed to handle complexity with ease and efficiency.
  version: 'v1'
servers:
  - url: http://localhost:5010
paths:
  /get_queue_status:
    get:
      operationId: getQueueStatus
      summary: Get the status and result of a task
      description: This endpoint retrieves the status and result (if the task is finished) of a task based on the provided queue ID.
      parameters:
        - in: query
          name: queueID
          description: The queue ID of the task
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the status and result of the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Bad request (e.g., missing or invalid queue ID)
        '404':
          description: Queue ID not found
        '500':
          description: Internal server error
      
  /queue_task:
    post:
      operationId: queueTask
      summary: Queues a new task and provides a queue ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueResponse'

  /get_queues:
    get:
      operationId: getQueues
      summary: Get all tasks
      description: This endpoint retrieves all tasks in the queue.
      responses:
        '200':
          description: Successfully retrieved all tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '404':
          description: No tasks found
        '500':
          description: Internal server error

  /update_task:
    patch:
      operationId: updateTask
      summary: Update a task
      description: This endpoint updates the status, result, and system message of a task based on the provided queue ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
      responses:
        '200':
          description: Successfully updated the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Bad request (e.g., missing or invalid queue ID or status)
        '404':
          description: Queue ID not found
        '500':
          description: Internal server error

components:
  schemas:
    TaskResponse:
      type: object
      required:
        - status
      properties:     
        status:
          type: string
          description: Status of the task request, 'in-progress', 'failed', 'done'  
        result:
          type: string
          description: The result of the task
          nullable: true
        systemMessage:
          type: string
          description: A message from the system that is not a result
          nullable: true

    QueueResponse:
      type: object
      required:
        - status
        - queueID
      properties:     
        status:
          type: string
          description: Status of the task request, 'in-progress', 'failed', 'queued'
        queueID:
          type: string
          description: The queue ID of the task
          nullable: true          
        systemMessage:
          type: string
          description: A message from the system that is not a result
          nullable: true                            

    TaskRequest:
      type: object
      required:
      - taskData
      properties:
        taskData:
          type: string
          description: The data for the task you want to queue

    TaskUpdateRequest:
      type: object
      required:
      - queueID
      - status
      properties:
        queueID:
          type: string
          description: The queue ID of the task
        status:
          type: string
          description: The new status of the task
          enum: ['in-progress', 'failed', 'done', 'queued']
        result:
          type: string
          description: The result of the task
          nullable: true
        systemMessage:
          type: string
          description: A message from the system that is not a result
          nullable: true
