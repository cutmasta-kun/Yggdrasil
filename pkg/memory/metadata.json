{
    "title": "My Datasette Instance",
    "databases": {
        "tasks": {
            "queries": {
                "get_tasks_with_metadata": {
                    "sql": "SELECT id, queueID, taskData, status, result, systemMessage, created_at, metadata FROM tasks ORDER BY created_at DESC",
                    "title": "Get Tasks"
                },
                "get_tasks": {
                    "sql": "SELECT id, queueID, taskData, status, result, systemMessage, created_at FROM tasks ORDER BY created_at DESC",
                    "title": "Get Tasks"
                },
                "get_tasks_by_queueID": {
                    "sql": "SELECT * FROM tasks WHERE queueID = :queueID",
                    "title": "Get Tasks by queueID",
                    "params": ["queueID"]
                },
                "add_task_with_metadata": {
                    "sql": "INSERT INTO tasks (queueID, taskData, status, result, systemMessage, metadata) VALUES (:queueID, :taskData, :status, :result, :systemMessage, :metadata)",
                    "write": true,
                    "on_success_message": "Task inserted",
                    "on_success_redirect": "/tasks/tasks.json",
                    "on_error_message": "Task insert failed",
                    "on_error_redirect": "/tasks.json",
                    "params": ["queueID", "taskData", "status", "result", "systemMessage", "metadata"]
                },
                "add_task": {
                    "sql": "INSERT INTO tasks (queueID, taskData, status, result, systemMessage) VALUES (:queueID, :taskData, :status, :result, :systemMessage)",
                    "write": true,
                    "on_success_message": "Task inserted",
                    "on_success_redirect": "/tasks/tasks.json",
                    "on_error_message": "Task insert failed",
                    "on_error_redirect": "/tasks.json",
                    "params": ["queueID", "taskData", "status", "result", "systemMessage"]
                },
                "update_task": {
                    "sql": "UPDATE tasks SET status = :status, result = :result, systemMessage = :systemMessage WHERE queueID = :queueID",
                    "write": true,
                    "on_success_message": "Task updated",
                    "on_success_redirect": "/tasks/tasks.json",
                    "on_error_message": "Task update failed",
                    "on_error_redirect": "/tasks.json",
                    "params": ["queueID", "status", "result", "systemMessage"]
                }
            }
        },
        "messages": {
            "queries": {
                "get_messages": {
                    "sql": "SELECT * FROM messages ORDER BY created_at DESC",
                    "title": "Get Messages"
                },
                "get_messages_with_limit": {
                    "sql": "SELECT * FROM messages ORDER BY created_at DESC LIMIT :limit",
                    "title": "Get Messages with Limit",
                    "params": ["limit"]
                },
                "get_messages_by_uuid": {
                    "sql": "SELECT * FROM messages WHERE uuid = :uuid",
                    "title": "Get Message by UUID",
                    "params": ["uuid"]
                },
                "add_message": {
                    "sql": "INSERT INTO messages (uuid, message) VALUES (:uuid, :message)",
                    "title": "Insert Message",
                    "write": true,
                    "on_success_message": "Message inserted",
                    "on_success_redirect": "/messages/get_messages_by_uuid.json?uuid=",
                    "on_error_message": "Message insert failed",
                    "on_error_redirect": "/messages.json"
                },

                "get_memories": {
                    "sql": "SELECT substr(message, 1, 100) || CASE WHEN length(message) > 100 THEN '...' ELSE '' END as message, uuid FROM messages ORDER BY created_at DESC",
                    "title": "Get Memories"
                },
                "get_memories_with_limit": {
                    "sql": "SELECT substr(message, 1, 100) || CASE WHEN length(message) > 100 THEN '...' ELSE '' END as message, uuid FROM messages ORDER BY created_at DESC LIMIT :limit",
                    "title": "Get Memories with Limit",
                    "params": ["limit"]
                },
                "get_memories_by_uuid": {
                    "sql": "SELECT * FROM messages WHERE uuid = :uuid",
                    "title": "Get Memories by UUID",
                    "params": ["uuid"]
                },
                "add_memory": {
                    "sql": "INSERT INTO messages (uuid, message) VALUES (:uuid, :message)",
                    "title": "Insert Memory",
                    "write": true,
                    "on_success_message": "Memory inserted",
                    "on_success_redirect": "/messages/get_memories.json?uuid=",
                    "on_error_message": "Message insert failed",
                    "on_error_redirect": "/messages.json"
                }
            }
        }
    }
}
